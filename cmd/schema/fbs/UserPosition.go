// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UserPositionT struct {
	Name string `json:"name"`
	Pos *PositionT `json:"pos"`
}

func (t *UserPositionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	UserPositionStart(builder)
	UserPositionAddName(builder, nameOffset)
	posOffset := t.Pos.Pack(builder)
	UserPositionAddPos(builder, posOffset)
	return UserPositionEnd(builder)
}

func (rcv *UserPosition) UnPackTo(t *UserPositionT) {
	t.Name = string(rcv.Name())
	t.Pos = rcv.Pos(nil).UnPack()
}

func (rcv *UserPosition) UnPack() *UserPositionT {
	if rcv == nil { return nil }
	t := &UserPositionT{}
	rcv.UnPackTo(t)
	return t
}

type UserPosition struct {
	_tab flatbuffers.Table
}

func GetRootAsUserPosition(buf []byte, offset flatbuffers.UOffsetT) *UserPosition {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UserPosition{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUserPosition(buf []byte, offset flatbuffers.UOffsetT) *UserPosition {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UserPosition{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UserPosition) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UserPosition) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UserPosition) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserPosition) Pos(obj *Position) *Position {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Position)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func UserPositionStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func UserPositionAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func UserPositionAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(pos), 0)
}
func UserPositionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
